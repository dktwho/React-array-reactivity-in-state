Массивы в React также обладают реактивностью. 
При чем React реактивно реагирует на все изменения массива: на добавление, 
удаление, изменение элементов, а также на изменение их порядка.


При этом правилами React запрещено изменять сам массив из стейта, он должен быть иммутабельным.
Правильным подходом в React является создание нового массива на основе предыдущего и перезапись стейта новым массивом.


Давайте добавим в наш массив notes еще один элемент. Через метод push это делать неправильно, так как мы изменяем сам массив:

notes.push(6); // так не правильно
setNotes(notes);


Чтобы не изменять сам массив, можно сделать его копию, применить к ней метод push, и затем перезаписать стейт на массив из копии:

const copy = Object.assign([], notes);
copy.push(6); // так правильно
setNotes(copy);

А можно использовать хитрый прием с деструктуризацией:
setNotes([...notes, 6]); // так правильно


Давайте удалим из массива элемент по его номеру.
 Пусть этот номер хранится в переменной index.
  Через метод splice удаление делать неправильно, так как изменятся массив:


Пусть мы хотим поменять значение некоторому элементу массива. 
Пусть номер для изменения хранится в переменной index.

Изменять элемент напрямую будет неправильно:

notes[index] = '!'; // так не правильно
setNotes(notes);


Правильным подходом будет изменить его копию:

let copy = Object.assign([], notes);
copy[index] = '!'; // так правильно
setNotes(copy);


Либо использовать деструктуризацию:
setNotes([...notes.slice(0, index), '!',...notes.slice(index + 1)]);
